/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as VideoRouteImport } from './routes/video/route'
import { Route as HomeRouteImport } from './routes/home/route'
import { Route as IndexImport } from './routes/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as WatchVideoIdImport } from './routes/watch/$videoId'
import { Route as VideoUploadImport } from './routes/video/upload'
import { Route as VideoMyUploadsImport } from './routes/video/my-uploads'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgetPasswordImport } from './routes/auth/forget-password'
import { Route as VideoEditVideoIdImport } from './routes/video/edit.$videoId'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const VideoRouteRoute = VideoRouteImport.update({
  id: '/video',
  path: '/video',
  getParentRoute: () => rootRoute,
} as any)

const HomeRouteRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => HomeRouteRoute,
} as any)

const WatchVideoIdRoute = WatchVideoIdImport.update({
  id: '/watch/$videoId',
  path: '/watch/$videoId',
  getParentRoute: () => rootRoute,
} as any)

const VideoUploadRoute = VideoUploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => VideoRouteRoute,
} as any)

const VideoMyUploadsRoute = VideoMyUploadsImport.update({
  id: '/my-uploads',
  path: '/my-uploads',
  getParentRoute: () => VideoRouteRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgetPasswordRoute = AuthForgetPasswordImport.update({
  id: '/auth/forget-password',
  path: '/auth/forget-password',
  getParentRoute: () => rootRoute,
} as any)

const VideoEditVideoIdRoute = VideoEditVideoIdImport.update({
  id: '/edit/$videoId',
  path: '/edit/$videoId',
  getParentRoute: () => VideoRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRoute
    }
    '/video': {
      id: '/video'
      path: '/video'
      fullPath: '/video'
      preLoaderRoute: typeof VideoRouteImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/auth/forget-password': {
      id: '/auth/forget-password'
      path: '/auth/forget-password'
      fullPath: '/auth/forget-password'
      preLoaderRoute: typeof AuthForgetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/video/my-uploads': {
      id: '/video/my-uploads'
      path: '/my-uploads'
      fullPath: '/video/my-uploads'
      preLoaderRoute: typeof VideoMyUploadsImport
      parentRoute: typeof VideoRouteImport
    }
    '/video/upload': {
      id: '/video/upload'
      path: '/upload'
      fullPath: '/video/upload'
      preLoaderRoute: typeof VideoUploadImport
      parentRoute: typeof VideoRouteImport
    }
    '/watch/$videoId': {
      id: '/watch/$videoId'
      path: '/watch/$videoId'
      fullPath: '/watch/$videoId'
      preLoaderRoute: typeof WatchVideoIdImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/'
      fullPath: '/home/'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof HomeRouteImport
    }
    '/video/edit/$videoId': {
      id: '/video/edit/$videoId'
      path: '/edit/$videoId'
      fullPath: '/video/edit/$videoId'
      preLoaderRoute: typeof VideoEditVideoIdImport
      parentRoute: typeof VideoRouteImport
    }
  }
}

// Create and export the route tree

interface HomeRouteRouteChildren {
  HomeIndexRoute: typeof HomeIndexRoute
}

const HomeRouteRouteChildren: HomeRouteRouteChildren = {
  HomeIndexRoute: HomeIndexRoute,
}

const HomeRouteRouteWithChildren = HomeRouteRoute._addFileChildren(
  HomeRouteRouteChildren,
)

interface VideoRouteRouteChildren {
  VideoMyUploadsRoute: typeof VideoMyUploadsRoute
  VideoUploadRoute: typeof VideoUploadRoute
  VideoEditVideoIdRoute: typeof VideoEditVideoIdRoute
}

const VideoRouteRouteChildren: VideoRouteRouteChildren = {
  VideoMyUploadsRoute: VideoMyUploadsRoute,
  VideoUploadRoute: VideoUploadRoute,
  VideoEditVideoIdRoute: VideoEditVideoIdRoute,
}

const VideoRouteRouteWithChildren = VideoRouteRoute._addFileChildren(
  VideoRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/video': typeof VideoRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/forget-password': typeof AuthForgetPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/video/my-uploads': typeof VideoMyUploadsRoute
  '/video/upload': typeof VideoUploadRoute
  '/watch/$videoId': typeof WatchVideoIdRoute
  '/home/': typeof HomeIndexRoute
  '/video/edit/$videoId': typeof VideoEditVideoIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/video': typeof VideoRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/forget-password': typeof AuthForgetPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/video/my-uploads': typeof VideoMyUploadsRoute
  '/video/upload': typeof VideoUploadRoute
  '/watch/$videoId': typeof WatchVideoIdRoute
  '/home': typeof HomeIndexRoute
  '/video/edit/$videoId': typeof VideoEditVideoIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home': typeof HomeRouteRouteWithChildren
  '/video': typeof VideoRouteRouteWithChildren
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
  '/auth/forget-password': typeof AuthForgetPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/video/my-uploads': typeof VideoMyUploadsRoute
  '/video/upload': typeof VideoUploadRoute
  '/watch/$videoId': typeof WatchVideoIdRoute
  '/home/': typeof HomeIndexRoute
  '/video/edit/$videoId': typeof VideoEditVideoIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/video'
    | '/privacy'
    | '/terms'
    | '/auth/forget-password'
    | '/auth/login'
    | '/auth/register'
    | '/video/my-uploads'
    | '/video/upload'
    | '/watch/$videoId'
    | '/home/'
    | '/video/edit/$videoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/video'
    | '/privacy'
    | '/terms'
    | '/auth/forget-password'
    | '/auth/login'
    | '/auth/register'
    | '/video/my-uploads'
    | '/video/upload'
    | '/watch/$videoId'
    | '/home'
    | '/video/edit/$videoId'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/video'
    | '/privacy'
    | '/terms'
    | '/auth/forget-password'
    | '/auth/login'
    | '/auth/register'
    | '/video/my-uploads'
    | '/video/upload'
    | '/watch/$videoId'
    | '/home/'
    | '/video/edit/$videoId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRouteRoute: typeof HomeRouteRouteWithChildren
  VideoRouteRoute: typeof VideoRouteRouteWithChildren
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
  AuthForgetPasswordRoute: typeof AuthForgetPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  WatchVideoIdRoute: typeof WatchVideoIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRouteRoute: HomeRouteRouteWithChildren,
  VideoRouteRoute: VideoRouteRouteWithChildren,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
  AuthForgetPasswordRoute: AuthForgetPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  WatchVideoIdRoute: WatchVideoIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/video",
        "/privacy",
        "/terms",
        "/auth/forget-password",
        "/auth/login",
        "/auth/register",
        "/watch/$videoId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home/route.tsx",
      "children": [
        "/home/"
      ]
    },
    "/video": {
      "filePath": "video/route.tsx",
      "children": [
        "/video/my-uploads",
        "/video/upload",
        "/video/edit/$videoId"
      ]
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/auth/forget-password": {
      "filePath": "auth/forget-password.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/video/my-uploads": {
      "filePath": "video/my-uploads.tsx",
      "parent": "/video"
    },
    "/video/upload": {
      "filePath": "video/upload.tsx",
      "parent": "/video"
    },
    "/watch/$videoId": {
      "filePath": "watch/$videoId.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx",
      "parent": "/home"
    },
    "/video/edit/$videoId": {
      "filePath": "video/edit.$videoId.tsx",
      "parent": "/video"
    }
  }
}
ROUTE_MANIFEST_END */
