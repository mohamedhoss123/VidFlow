// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.19.6
// source: video.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "video";

export interface VideoResponse {
}

export interface CreateVideoRequest {
  url: string;
  userId: string;
  description: string;
}

export interface VideoQuality {
  quality: string;
  videoId: string;
  source: string;
}

export interface VideoReadyRequest {
  videoId: string;
  quality: VideoQuality[];
}

function createBaseVideoResponse(): VideoResponse {
  return {};
}

export const VideoResponse: MessageFns<VideoResponse> = {
  encode(_: VideoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VideoResponse {
    return {};
  },

  toJSON(_: VideoResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoResponse>, I>>(base?: I): VideoResponse {
    return VideoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoResponse>, I>>(_: I): VideoResponse {
    const message = createBaseVideoResponse();
    return message;
  },
};

function createBaseCreateVideoRequest(): CreateVideoRequest {
  return { url: "", userId: "", description: "" };
}

export const CreateVideoRequest: MessageFns<CreateVideoRequest> = {
  encode(message: CreateVideoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVideoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVideoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVideoRequest {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateVideoRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateVideoRequest>, I>>(base?: I): CreateVideoRequest {
    return CreateVideoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateVideoRequest>, I>>(object: I): CreateVideoRequest {
    const message = createBaseCreateVideoRequest();
    message.url = object.url ?? "";
    message.userId = object.userId ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseVideoQuality(): VideoQuality {
  return { quality: "", videoId: "", source: "" };
}

export const VideoQuality: MessageFns<VideoQuality> = {
  encode(message: VideoQuality, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quality !== "") {
      writer.uint32(10).string(message.quality);
    }
    if (message.videoId !== "") {
      writer.uint32(18).string(message.videoId);
    }
    if (message.source !== "") {
      writer.uint32(26).string(message.source);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoQuality {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoQuality();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quality = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.videoId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.source = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoQuality {
    return {
      quality: isSet(object.quality) ? globalThis.String(object.quality) : "",
      videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
    };
  },

  toJSON(message: VideoQuality): unknown {
    const obj: any = {};
    if (message.quality !== "") {
      obj.quality = message.quality;
    }
    if (message.videoId !== "") {
      obj.videoId = message.videoId;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoQuality>, I>>(base?: I): VideoQuality {
    return VideoQuality.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoQuality>, I>>(object: I): VideoQuality {
    const message = createBaseVideoQuality();
    message.quality = object.quality ?? "";
    message.videoId = object.videoId ?? "";
    message.source = object.source ?? "";
    return message;
  },
};

function createBaseVideoReadyRequest(): VideoReadyRequest {
  return { videoId: "", quality: [] };
}

export const VideoReadyRequest: MessageFns<VideoReadyRequest> = {
  encode(message: VideoReadyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.videoId !== "") {
      writer.uint32(10).string(message.videoId);
    }
    for (const v of message.quality) {
      VideoQuality.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoReadyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoReadyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.videoId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quality.push(VideoQuality.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoReadyRequest {
    return {
      videoId: isSet(object.videoId) ? globalThis.String(object.videoId) : "",
      quality: globalThis.Array.isArray(object?.quality)
        ? object.quality.map((e: any) => VideoQuality.fromJSON(e))
        : [],
    };
  },

  toJSON(message: VideoReadyRequest): unknown {
    const obj: any = {};
    if (message.videoId !== "") {
      obj.videoId = message.videoId;
    }
    if (message.quality?.length) {
      obj.quality = message.quality.map((e) => VideoQuality.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoReadyRequest>, I>>(base?: I): VideoReadyRequest {
    return VideoReadyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoReadyRequest>, I>>(object: I): VideoReadyRequest {
    const message = createBaseVideoReadyRequest();
    message.videoId = object.videoId ?? "";
    message.quality = object.quality?.map((e) => VideoQuality.fromPartial(e)) || [];
    return message;
  },
};

export interface VideoService {
  CreateVideo(request: CreateVideoRequest): Promise<VideoResponse>;
  MakeVideoReady(request: VideoReadyRequest): Promise<VideoResponse>;
}

export const VideoServiceServiceName = "video.VideoService";
export class VideoServiceClientImpl implements VideoService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || VideoServiceServiceName;
    this.rpc = rpc;
    this.CreateVideo = this.CreateVideo.bind(this);
    this.MakeVideoReady = this.MakeVideoReady.bind(this);
  }
  CreateVideo(request: CreateVideoRequest): Promise<VideoResponse> {
    const data = CreateVideoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateVideo", data);
    return promise.then((data) => VideoResponse.decode(new BinaryReader(data)));
  }

  MakeVideoReady(request: VideoReadyRequest): Promise<VideoResponse> {
    const data = VideoReadyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MakeVideoReady", data);
    return promise.then((data) => VideoResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
