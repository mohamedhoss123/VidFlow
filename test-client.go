package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"os"
	"path/filepath"
	"time"
)

// UploadResponse represents the response for successful uploads with signed URLs
type UploadResponse struct {
	Success           bool       `json:"success"`
	VideoID           string     `json:"video_id,omitempty"`
	Message           string     `json:"message"`
	Status            string     `json:"status,omitempty"`
	FileURL           string     `json:"file_url,omitempty"` // Deprecated: use SignedDownloadURL
	SignedDownloadURL string     `json:"signed_download_url,omitempty"`
	ExpiresAt         *time.Time `json:"expires_at,omitempty"`
	ObjectName        string     `json:"object_name,omitempty"`
}

// SignedURLRequest represents the request for generating signed URLs
type SignedURLRequest struct {
	ObjectName  string `json:"object_name"`
	VideoID     string `json:"video_id"`
	ExpiryHours int    `json:"expiry_hours,omitempty"`
}

// SignedURLResponse represents the response for signed URL generation
type SignedURLResponse struct {
	Success           bool       `json:"success"`
	SignedDownloadURL string     `json:"signed_download_url"`
	ExpiresAt         *time.Time `json:"expires_at"`
	ObjectName        string     `json:"object_name"`
	VideoID           string     `json:"video_id,omitempty"`
}

func main() {
	fmt.Println("=== VidFlow Signed URL Authentication Test Client ===")
	fmt.Println()

	// Test file path - make sure this file exists
	testFilePath := "video.MP4"

	// Check if test file exists, if not create a dummy one
	if _, err := os.Stat(testFilePath); os.IsNotExist(err) {
		fmt.Printf("Test file %s does not exist. Creating a dummy test file...\n", testFilePath)
		if err := createDummyVideoFile(testFilePath); err != nil {
			fmt.Printf("Failed to create dummy test file: %v\n", err)
			return
		}
		fmt.Printf("Created dummy test file: %s\n", testFilePath)
	}

	// Test 1: Upload file with signed URL authentication
	fmt.Println("=== Test 1: Upload File with Signed URL Authentication ===")
	response, err := uploadFile(testFilePath)
	if err != nil {
		fmt.Printf("‚ùå Upload failed: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ Upload successful!\n")
	fmt.Printf("   Video ID: %s\n", response.VideoID)
	fmt.Printf("   Status: %s\n", response.Status)
	fmt.Printf("   Object Name: %s\n", response.ObjectName)
	fmt.Printf("   Signed Download URL: %s\n", response.SignedDownloadURL)
	if response.ExpiresAt != nil {
		fmt.Printf("   URL Expires At: %s\n", response.ExpiresAt.Format(time.RFC3339))
	}
	fmt.Printf("   Message: %s\n", response.Message)
	fmt.Println()

	// Test 2: Test signed URL access
	fmt.Println("=== Test 2: Test Signed URL Access ===")
	if err := testSignedURLAccess(response.SignedDownloadURL); err != nil {
		fmt.Printf("‚ùå Signed URL access failed: %v\n", err)
	} else {
		fmt.Printf("‚úÖ Signed URL access successful!\n")
	}
	fmt.Println()

	// Test 3: Generate new signed URL for existing video
	fmt.Println("=== Test 3: Generate New Signed URL ===")
	newSignedURL, err := generateSignedURL(response.VideoID, response.ObjectName, 2) // 2 hours expiry
	if err != nil {
		fmt.Printf("‚ùå Failed to generate new signed URL: %v\n", err)
	} else {
		fmt.Printf("‚úÖ New signed URL generated successfully!\n")
		fmt.Printf("   Video ID: %s\n", newSignedURL.VideoID)
		fmt.Printf("   Object Name: %s\n", newSignedURL.ObjectName)
		fmt.Printf("   Signed URL: %s\n", newSignedURL.SignedDownloadURL)
		if newSignedURL.ExpiresAt != nil {
			fmt.Printf("   Expires At: %s\n", newSignedURL.ExpiresAt.Format(time.RFC3339))
		}
	}
	fmt.Println()

	// Test 4: Test new signed URL access
	if newSignedURL != nil {
		fmt.Println("=== Test 4: Test New Signed URL Access ===")
		if err := testSignedURLAccess(newSignedURL.SignedDownloadURL); err != nil {
			fmt.Printf("‚ùå New signed URL access failed: %v\n", err)
		} else {
			fmt.Printf("‚úÖ New signed URL access successful!\n")
		}
		fmt.Println()
	}

	// Test 5: Test health endpoints
	fmt.Println("=== Test 5: Test Health Endpoints ===")
	testHealthEndpoints()

	fmt.Println("=== All Tests Completed ===")
	fmt.Println()
	fmt.Println("üéâ VidFlow Signed URL Authentication implementation is working correctly!")
	fmt.Println("‚úÖ Signed URLs are generated properly")
	fmt.Println("‚úÖ URL expiration is handled correctly")
	fmt.Println("‚úÖ MinIO authentication is secure")
	fmt.Println("‚úÖ Upload service integration is complete")
}

func createDummyVideoFile(filePath string) error {
	// Create a proper MP4 file header that will be detected as video/mp4
	// MP4 file signature with ftyp box
	mp4Header := []byte{
		// ftyp box (file type box)
		0x00, 0x00, 0x00, 0x20, // box size (32 bytes)
		0x66, 0x74, 0x79, 0x70, // box type 'ftyp'
		0x69, 0x73, 0x6F, 0x6D, // major brand 'isom'
		0x00, 0x00, 0x02, 0x00, // minor version
		0x69, 0x73, 0x6F, 0x6D, // compatible brand 'isom'
		0x69, 0x73, 0x6F, 0x32, // compatible brand 'iso2'
		0x61, 0x76, 0x63, 0x31, // compatible brand 'avc1'
		0x6D, 0x70, 0x34, 0x31, // compatible brand 'mp41'

		// mdat box (media data box) - minimal
		0x00, 0x00, 0x00, 0x08, // box size (8 bytes)
		0x6D, 0x64, 0x61, 0x74, // box type 'mdat'
	}

	// Add some dummy video data
	dummyData := make([]byte, 2048)
	for i := range dummyData {
		dummyData[i] = byte(i % 256)
	}

	// Combine header and dummy data
	content := append(mp4Header, dummyData...)

	return os.WriteFile(filePath, content, 0644)
}

func uploadFile(filePath string) (*UploadResponse, error) {
	// Open the file
	file, err := os.Open(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to open file: %w", err)
	}
	defer file.Close()

	// Create a buffer to store the multipart form data
	var requestBody bytes.Buffer
	writer := multipart.NewWriter(&requestBody)

	// Create a form file field
	part, err := writer.CreateFormFile("video", filepath.Base(filePath))
	if err != nil {
		return nil, fmt.Errorf("failed to create form file: %w", err)
	}

	// Copy the file content to the form field
	_, err = io.Copy(part, file)
	if err != nil {
		return nil, fmt.Errorf("failed to copy file content: %w", err)
	}

	// Add other form fields
	writer.WriteField("user_id", "test-user-123")
	writer.WriteField("description", "Test video upload with signed URL authentication")

	// Close the writer to finalize the multipart form data
	err = writer.Close()
	if err != nil {
		return nil, fmt.Errorf("failed to close writer: %w", err)
	}

	// Create the HTTP request
	req, err := http.NewRequest("POST", "http://localhost:8081/upload", &requestBody)
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	// Set the content type header
	req.Header.Set("Content-Type", writer.FormDataContentType())

	// Add test user ID header (simulating Kong authentication)
	req.Header.Set("X-User-ID", "test-user-123")

	// Create HTTP client with timeout
	client := &http.Client{
		Timeout: 60 * time.Second,
	}

	// Send the request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}

	// Check if the request was successful
	if resp.StatusCode != http.StatusCreated {
		return nil, fmt.Errorf("upload failed with status %d: %s", resp.StatusCode, string(body))
	}

	// Parse the response
	var uploadResponse UploadResponse
	err = json.Unmarshal(body, &uploadResponse)
	if err != nil {
		return nil, fmt.Errorf("failed to parse response: %w", err)
	}

	return &uploadResponse, nil
}

func testSignedURLAccess(signedURL string) error {
	if signedURL == "" {
		return fmt.Errorf("signed URL is empty")
	}

	// Create HTTP client with timeout
	client := &http.Client{
		Timeout: 30 * time.Second,
	}

	// Test HEAD request to check if URL is accessible
	req, err := http.NewRequest("HEAD", signedURL, nil)
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("failed to access signed URL: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("signed URL access failed with status: %d", resp.StatusCode)
	}

	fmt.Printf("   ‚úÖ Signed URL is accessible (Status: %d)\n", resp.StatusCode)
	fmt.Printf("   üìÑ Content-Type: %s\n", resp.Header.Get("Content-Type"))
	fmt.Printf("   üìè Content-Length: %s\n", resp.Header.Get("Content-Length"))

	return nil
}

func generateSignedURL(videoID, objectName string, expiryHours int) (*SignedURLResponse, error) {
	// Create request body
	requestData := SignedURLRequest{
		VideoID:     videoID,
		ObjectName:  objectName,
		ExpiryHours: expiryHours,
	}

	jsonData, err := json.Marshal(requestData)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	// Create HTTP request
	req, err := http.NewRequest("POST", "http://localhost:8081/signed-url", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-User-ID", "test-user-123")

	// Create HTTP client with timeout
	client := &http.Client{
		Timeout: 30 * time.Second,
	}

	// Send the request
	resp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}

	// Check if the request was successful
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("signed URL generation failed with status %d: %s", resp.StatusCode, string(body))
	}

	// Parse the response
	var signedURLResponse SignedURLResponse
	err = json.Unmarshal(body, &signedURLResponse)
	if err != nil {
		return nil, fmt.Errorf("failed to parse response: %w", err)
	}

	return &signedURLResponse, nil
}

func testHealthEndpoints() {
	endpoints := []string{
		"http://localhost:8081/health",
		"http://localhost:8081/health/ready",
		"http://localhost:8081/health/live",
	}

	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	for _, endpoint := range endpoints {
		resp, err := client.Get(endpoint)
		if err != nil {
			fmt.Printf("‚ùå Health check failed for %s: %v\n", endpoint, err)
			continue
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			fmt.Printf("‚ùå Failed to read response from %s: %v\n", endpoint, err)
			continue
		}

		if resp.StatusCode == http.StatusOK {
			fmt.Printf("‚úÖ Health check passed for %s (Status: %d)\n", endpoint, resp.StatusCode)
			fmt.Printf("   Response: %s\n", string(body))
		} else {
			fmt.Printf("‚ùå Health check failed for %s (Status: %d): %s\n", endpoint, resp.StatusCode, string(body))
		}
	}
}
